generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Appointments {
  id: String      @id @default(auto()) @map("_id") @db.ObjectId 
  v            Int      @map("__v")
  patient: Patients @relation(fields: [patientId], references: [id], onDelete: Cascade)
  vet: Users       @relation(fields: [vetId], references: [id], onDelete: Cascade)
  reason: String
  date: DateTime
  notes: String?
  status: String  @enum(["Booked", "Completed", "Canceled"]) @default("Booked") @test.IntegrationTest.Field("status")

  createdAt: DateTime @default(now()) @test.IntegrationTest.Field("createdAt")
  updatedAt: DateTime @updatedAt @test.IntegrationTest.Field("updatedAt")

  // Foreign keys
  patientId: String
  vetId: String
}

model Boarding {
  id: String      @id @default(auto()) @map("_id") @db.ObjectId
  v            Int      @map("__v")
  patient: Patients @relation(fields: [patientId], references: [id])
  start_date: DateTime
  end_date: DateTime
  notes: String?
  status: String  @enum(["Booked", "In Progress", "Completed", "Canceled"]) @default("Booked")
  
  createdAt: DateTime @default(now())
  updatedAt: DateTime @updatedAt

  // Foreign keys
  patientId: String
}

model Credentials {
  id: String          @id @default(auto()) @map("_id") @test.IntegrationTest.Field("id") @db.ObjectId
  v                 Int      @map("__v")
  user: User          @relation(fields: [userId], references: [id])
  username: String    @unique
  password: String
  createdAt: DateTime @default(now()) @test.IntegrationTest.Field("createdAt")
  updatedAt: DateTime @updatedAt @test.IntegrationTest.Field("updatedAt")

  // Foreign key
  userId: String
}

model Doses {
  id: String             @id @default(auto()) @map("_id") @test.IntegrationTest.Field("id") @db.ObjectId
  v                 Int      @map("__v")
  vaccine: Vaccine       @relation(fields: [vaccineId], references: [id])
  date: DateTime         @db.Date
  administered: Boolean  @default(false)
  vet: User?             @relation(fields: [vetId], references: [id])

  createdAt: DateTime    @default(now()) @test.IntegrationTest.Field("createdAt")
  updatedAt: DateTime    @updatedAt @test.IntegrationTest.Field("updatedAt")

  // Foreign keys
  vaccineId: String
  vetId: String?
}

model Patients {
  id: String            @id @default(auto()) @map("_id") @test.IntegrationTest.Field("id") @db.ObjectId
  v            Int      @map("__v")
  name: String          @unique
  gender: String?
  species: String?
  breed: String?
  age: Int?             @int @test.IntegrationTest.Field("age")
  weight: Float?        @float
  owner: Users           @relation(fields: [ownerId], references: [id])
  appointments: Appointment[]
  treatments: Treatment[]
  boardings: Boarding[]
  vaccines: Vaccine[]

  createdAt: DateTime   @default(now()) @test.IntegrationTest.Field("createdAt")
  updatedAt: DateTime   @updatedAt @test.IntegrationTest.Field("updatedAt")

  // Foreign key
  ownerId: String
}

model Payments {
  id: String             @id @default(auto()) @map("_id") @test.IntegrationTest.Field("id") @db.ObjectId
  v            Int      @map("__v")
  module_id: String      @map("module_id") @db.ObjectId
  module_name: String    @default("Boarding") @enum(["Appointments", "Boarding", "Vaccines", "Treatment"])
  amount: Float          @default(0) @test.IntegrationTest.Field("amount")
  status: String         @default("Pending") @enum(["Completed", "Pending"]) @test.IntegrationTest.Field("status")
  payment_bal: Float     @default(0) @test.IntegrationTest.Field("payment_bal")
  description: String?
  transactions: Transaction[]

  createdAt: DateTime    @default(now()) @test.IntegrationTest.Field("createdAt")
  updatedAt: DateTime    @updatedAt @test.IntegrationTest.Field("updatedAt")
}

model Transactions {
  id: String                   @id @default(auto()) @map("_id") @test.IntegrationTest.Field("id")
  payment: Payment             @relation(fields: [paymentId], references: [id])
  paymentId: String            @map("payment_id")
  mpesa_transaction_id: String?
  amount_paid: Float           @test.IntegrationTest.Field("amount_paid")
  payment_type: String         @enum(["Cash", "Mpesa", "Bank"]) @default("Cash") @test.IntegrationTest.Field("payment_type")
  bank_transaction_reference: String?
  bank_name: String?
  payment_date: DateTime       @default(now()) @test.IntegrationTest.Field("payment_date")

  createdAt: DateTime          @default(now()) @test.IntegrationTest.Field("createdAt")
  updatedAt: DateTime          @updatedAt @test.IntegrationTest.Field("updatedAt")
}

model Treatments {
  id: String                 @id @default(auto()) @map("_id") @test.IntegrationTest.Field("id")
  name: String               @test.IntegrationTest.Field("name")
  patient: Patient           @relation(fields: [patientId], references: [id])
  vet: User?                 @relation(fields: [vetId], references: [id])
  notes: String?
  date: DateTime             @default(now()) @db.Date @test.IntegrationTest.Field("date")
  payments: Payment[]

  createdAt: DateTime        @default(now()) @test.IntegrationTest.Field("createdAt")
  updatedAt: DateTime        @updatedAt @test.IntegrationTest.Field("updatedAt")

  // Foreign keys
  patientId: String
  vetId: String?
}

model Users {
  id: String               @id @default(auto()) @map("_id") @test.IntegrationTest.Field("id")
  phone: String            @unique
  name: String             @test.IntegrationTest.Field("name")
  email: String            @unique
  role: String             @enum(["customer", "employee", "admin"])
  county: String?
  sub_county: String?
  ward: String?
  isSuperAdmin: Boolean    @default(false) @test.IntegrationTest.Field("isSuperAdmin")
  profile: String?
  patients: Patient[]

  createdAt: DateTime      @default(now()) @test.IntegrationTest.Field("createdAt")
  updatedAt: DateTime      @updatedAt @test.IntegrationTest.Field("updatedAt")
}

model Vaccines {
  id: String                 @id @default(auto()) @map("_id") @test.IntegrationTest.Field("id")
  patient: Patient           @relation(fields: [patientId], references: [id])
  name: String               @test.IntegrationTest.Field("name")
  total_doses: Int           @test.IntegrationTest.Field("total_doses")
  doses_administered: Int    @default(0) @test.IntegrationTest.Field("doses_administered")
  status: String             @enum(["Pending", "In Progress", "Completed", "Canceled"]) @default("Pending") @test.IntegrationTest.Field("status")
  notes: String?
  doses: Dose[]

  createdAt: DateTime        @default(now()) @test.IntegrationTest.Field("createdAt")
  updatedAt: DateTime        @updatedAt @test.IntegrationTest.Field("updatedAt")

  // Foreign keys
  patientId: String
}
